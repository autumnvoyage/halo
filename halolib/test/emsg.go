package halo

var (
	testData = [...]byte{
		0x4e, 0x3e, 0x89, 0x3c, 0xee, 0xa0, 0x81, 0x7f, 0x73, 0xb2, 0x44, 0x2e,
		0xc4, 0x15, 0x32, 0xaf, 0x98, 0xb5, 0x94, 0xd3, 0x70, 0x45, 0xca, 0x51,
		0x74, 0xfd, 0x82, 0x23, 0x56, 0xbc, 0xbb, 0x0b, 0x6b, 0xf2, 0x47, 0x8b,
		0xff, 0x79, 0xfe, 0x88, 0xff, 0x19, 0xdd, 0x23, 0xdd, 0x3d, 0x37, 0x7f,
		0x71, 0x7e, 0xeb, 0xc6, 0xfb, 0xc3, 0x26, 0x17, 0xb6, 0x75, 0xdd, 0x15,
		0x7f, 0x50, 0x01, 0x09,
	}
	testKey = [...]byte{
		0xe4, 0x75, 0x16, 0xe3, 0xdb, 0xb9, 0xbf, 0x6a, 0x1c, 0xd3, 0x96, 0x97,
		0x1f, 0x1d, 0x10, 0x00, 0xaf, 0xb3, 0x35, 0xd7, 0xc5, 0x70, 0xea, 0x48,
		0x70, 0x30, 0xfa, 0x1c, 0x1a, 0x38, 0x1c, 0x98,
	}
)

func TestCrypto(t *testing.T) {
	data := testData[:]
	key := testKey[:]
	enc, err := EncryptData(data, key)
	if err != nil {
		t.Fatal(err)
		return
	}
	dec, err := DecryptData(enc, key)
	if err != nil {
		t.Fatal(err)
		return
	}
	// Verify contents are the same
	if len(dec) != len(data) {
		t.Error("Decrypted data length is wrong")
		return
	}
	for i, _ := range dec {
		if dec[i] != data[i] {
			t.Errorf("Decrypted data mismatch\nExpected: %v\nWas: %v", data[i],
				dec[i])
			return
		}
	}
}
